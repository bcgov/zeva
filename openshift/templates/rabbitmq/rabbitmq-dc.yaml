---
kind: Template
apiVersion: v1
metadata:
  name: rabbitmq-dc
  creationTimestamp:
parameters:
  - name: NAME
    displayName:
    description: the module name entered when run yo bcdk:pipeline, which is zeva
    required: true
  - name: SUFFIX
    displayName:
    description: sample is -pr-0
    required: true
  - name: ENV_NAME
    value: dev
    displayName: Environment name
    description: Environment name, dev, test and prod
    required: true
  - name: CPU_REQUEST
    displayName: Requested CPU
    description: Requested CPU
    required: true
  - name: CPU_LIMIT
    displayName: CPU upper limit
    description: CPU upper limit
    required: true
  - name: MEMORY_REQUEST
    displayName: Requested memory
    description: Requested memory
    required: true
  - name: MEMORY_LIMIT
    displayName: Memory upper limit
    description: Memory upper limit
    required: true
  - name: REPLICA_COUNT
    value: '1'
    displayName: Replica count
    description: The number of replica to run
    required: true
  - name: RABBITMQ_PVC_SIZE
    value: 1Gi
    displayName: PVC size
    description: PVC size
    required: true
objects:
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${NAME}-rabbitmq${SUFFIX}
      labels: 
        name: ${NAME}-rabbitmq${SUFFIX}
      annotations:
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    spec:
      clusterIP: None
      ports:
        - name: amqp
          protocol: TCP
          port: 5672
          targetPort: 5672
        - name: management-web
          protocol: TCP
          port: 15672
          targetPort: 15672
      selector:
        app: ${NAME}-rabbitmq${SUFFIX}
  - kind: StatefulSet
    apiVersion: apps/v1
    metadata:
      name: ${NAME}-rabbitmq${SUFFIX}
    spec:
      selector:
        matchLabels:
          app: ${NAME}-rabbitmq${SUFFIX}
      serviceName: ${NAME}-rabbitmq${SUFFIX}
      replicas: ${REPLICA_COUNT}
      template:
        metadata:
          labels:
            app: ${NAME}-rabbitmq${SUFFIX}
        spec:
          terminationGracePeriodSeconds: 10
          containers:
            - name: rabbitmq
              image: docker-registry.default.svc:5000/tbiwaq-tools/rabbitmq:3.8.3-management-${ENV_NAME}
              command:
                - rabbitmq-server
              ports:
                - name: web-management
                  containerPort: 15672
                  protocol: TCP
                - name: amqp
                  containerPort: 5672
                  protocol: TCP
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              volumeMounts:
                - name: qqqq
                  mountPath: "/var/lib/rabbitmq"
              readinessProbe:
                tcpSocket:
                  port: 5672
                initialDelaySeconds: 30
                timeoutSeconds: 3
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              livenessProbe:
                tcpSocket:
                  port: 5672
                initialDelaySeconds: 30
                timeoutSeconds: 3
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              terminationMessagePath: "/dev/termination-log"
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
      volumeClaimTemplates:
        - metadata:
            name: qqqq
          spec:
            accessModes: [ ReadWriteOnce ]
            storageClassName: netapp-file-standard
            resources:
              requests:
                storage: ${RABBITMQ_PVC_SIZE}
