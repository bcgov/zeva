---
kind: Template
apiVersion: v1
labels:
  template: zeva-postgresql-persistent-template
metadata:
  name: postgresql-dc
  creationTimestamp:
parameters:
  - name: NAME
    displayName:
    description: the module name entered when run yo bcdk:pipeline, which is zeva
    required: true
  - name: SUFFIX
    displayName:
    description: sample is -dev-97
    required: true
  - name: VERSION
    displayName:
    description:  image tag name for output
    required: true
  - name: ENV_NAME
    displayName: Environment Name
    description: Environment Name
    required: true
  - description: Username for PostgreSQL user that will be used for accessing the database.
    from: zeva[A-Z0-9]{3}
    generate: expression
    name: ZEVA_DB_USER
    required: true
  - description: Password for the PostgreSQL connection user.
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: ZEVA_DB_PASSWORD
    required: true
  - name: CPU_REQUEST
    displayName: Requested CPU
    description: Requested CPU
    required: true
  - name: CPU_LIMIT
    displayName: CPU upper limit
    description: CPU upper limit
    required: true
  - name: MEMORY_REQUEST
    displayName: Requested memory
    description: Requested memory
    required: true
  - name: MEMORY_LIMIT
    displayName: Memory upper limit
    description: Memory upper limit
    required: true
  - name: DB_PVC_SIZE
    value: 5Gi
    displayName: PVC Size
    description: PVC Size
    required: true
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}-postgresql${SUFFIX}
      annotations:
        as-copy-of: "${NAME}-template-postgresql"
      labels: {}
    stringData:
      DATABASE_USER: "${ZEVA_DB_USER}"
      DATABASE_PASSWORD: "${ZEVA_DB_PASSWORD}"
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${NAME}-postgresql${SUFFIX}
      annotations:
        template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
      labels:
        name: postgresql
        app: zeva
        role: postgresql
        env: ${ENV_NAME}
    spec:
      ports:
        - name: postgresql
          protocol: TCP
          port: 5432
          targetPort: 5432
      selector:
        name: ${NAME}-postgresql${SUFFIX}
      type: ClusterIP
      sessionAffinity: None
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${NAME}-postgresql${SUFFIX}
      annotations:
        volume.beta.kubernetes.io/storage-class: netapp-file-standard
        template.openshift.io.bcgov/create: 'true'
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "${DB_PVC_SIZE}"
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: 'true'
      name: ${NAME}-postgresql${SUFFIX}
      labels:
        app: zeva
        role: postgresql
        env: ${ENV_NAME}
    spec:
      replicas: 1
      strategy:
        type: Recreate
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
            - postgresql
          from:
            kind: ImageStreamTag
            namespace: tbiwaq-tools
            name: postgresql:10-1-47
          lastTriggeredImage:
        type: ImageChange
      - type: ConfigChange
      test: false
      selector:
        name: ${NAME}-postgresql${SUFFIX}
      template:
        metadata:
          creationTimestamp:
          labels:
            name: ${NAME}-postgresql${SUFFIX}
        spec:
          volumes:
            - name: postgresql-data
              persistentVolumeClaim:
                claimName: ${NAME}-postgresql${SUFFIX}
            - configMap:
                defaultMode: 420
                name: zeva-postgresql-init
              name: volume-vzqaq
          containers:
            - name: postgresql
              image: " "
              ports:
                - containerPort: 5432
                  protocol: TCP
              env:
                - name: POSTGRESQL_DATABASE
                  value: zeva
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-postgresql${SUFFIX}
                      key: DATABASE_USER
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-postgresql${SUFFIX}
                      key: DATABASE_PASSWORD
              resources:
                request:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
                limits:
                  cpu: "${CPU_LIMIT}"
                  memory: "${MEMORY_LIMIT}"
              volumeMounts:
                - mountPath: /var/lib/pgsql/data
                  name: postgresql-data
                - mountPath: /opt/app-root/src/postgresql-start
                  name: volume-vzqaq
              readinessProbe:
                tcpSocket:
                  port: 5432
                initialDelaySeconds: 25
                timeoutSeconds: 1
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              livenessProbe:
                exec:
                  command:
                    - "/bin/sh"
                    - "-i"
                    - "-c"
                    - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d zeva -c 'create extension hstore'; psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d zeva -c 'SELECT 1'
                initialDelaySeconds: 35
                timeoutSeconds: 3
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: IfNotPresent
              securityContext:
                capabilities: {}
                privileged: false
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
    status: {}
