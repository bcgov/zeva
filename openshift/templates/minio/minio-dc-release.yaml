---
kind: Template
apiVersion: v1
metadata:
  name: minio
  annotations:
    description: Minio with persistent storage. By BC Gov.
    iconClass: icon-hdd
    openshift.io/display-name: BC Gov Minio
    tags: bcgov,pathfinder,minio,s3,objectstore
    template.openshift.io/documentation-url: https://github.com/BCDevOps/openshift-tools/tree/master/templates/minio
    template.openshift.io/long-description: This template deploys a minio server within
      OpenShift, backed by persistent volume storage.
    template.openshift.io/provider-display-name: Province of BC, Office of the Chief
      Information Officer, BC DevExchange and DevOps Branch
parameters:
  - name: ENV_NAME
    displayName: Environment Name
    description: Environment Name dev, test and prod
    required: true
  - name: VOLUME_CAPACITY
    displayName: Volume Capacity
    description: Volume space available to Minio server for files, e.g. 512Mi, 2Gi.
    value: 2Gi
    required: true
  - name: CPU_REQUEST
    displayName: Requested CPU
    description: Requested CPU
    required: true
  - name: CPU_LIMIT
    displayName: CPU upper limit
    description: CPU upper limit
    required: true
  - name: MEMORY_REQUEST
    displayName: Requested memory
    description: Requested memory
    required: true
  - name: MEMORY_LIMIT
    displayName: Memory upper limit
    description: Memory upper limit
    required: true
objects:
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: minio
      generation: 1
      labels:
        app: minio
    spec:
      strategy:
        type: Recreate
        resources: {}
        activeDeadlineSeconds: 21600
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - minio
            from:
              kind: ImageStreamTag
              name: minio:${ENV_NAME}
              namespace: "tbiwaq-${ENV_NAME}"
      replicas: 1
      test: false
      selector:
        app: minio
        deploymentconfig: minio
      template:
        metadata:
          creationTimestamp:
          labels:
            app: minio
            deploymentconfig: minio
        spec:
          volumes:
            - name: "minio-vol"
              persistentVolumeClaim:
                claimName: "minio"
          containers:
            - name: minio
              image: ''
              ports:
                - containerPort: 9000
                  protocol: TCP
              env:
                - name: MINIO_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: zeva-minio
                      key: MINIO_ACCESS_KEY
                - name: MINIO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: zeva-minio
                      key: MINIO_SECRET_KEY
                - name: MINIO_CONFIG_DIR
                  value: "/tmp"
                - name: MINIO_DATA_DIR
                  value: "/data"
              resources:
                limits:
                  cpu: "${CPU_LIMIT}"
                  memory: "${MEMORY_LIMIT}"
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
              volumeMounts:
                - name: "minio-vol"
                  mountPath: "/data"
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
    status:
      latestVersion: 0
      observedGeneration: 0
      replicas: 0
      updatedReplicas: 0
      availableReplicas: 0
      unavailableReplicas: 0
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: minio
      annotations:
        volume.beta.kubernetes.io/storage-class: netapp-file-standard
        template.openshift.io.bcgov/create: 'true'
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "${VOLUME_CAPACITY}"
  - kind: Service
    apiVersion: v1
    metadata:
      name: minio
      creationTimestamp:
      labels:
        app: minio
    spec:
      ports:
        - name: 9000-tcp
          protocol: TCP
          port: 9000
          targetPort: 9000
      selector:
        deploymentconfig: minio
      type: ClusterIP
      sessionAffinity: None
    status:
      loadBalancer: {}

