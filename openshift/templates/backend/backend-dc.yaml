apiVersion: template.openshift.io/v1
kind: Template
metadata:
  creationTimestamp: null
  name: zeva-backend-dc
parameters:
  - name: NAME
    displayName: null
    description: 'the module name entered when run yo bcdk:pipeline, which is zeva'
    required: true
  - name: SUFFIX
    displayName: null
    description: sample is -dev-97
    required: true
  - name: VERSION
    displayName: null
    description: image tag name for output
    required: true
  - name: ENV_NAME
    value: dev
    displayName: Environment name
    description: 'Environment name, dev, test and prod'
    required: true
  - name: BACKEND_HOST_NAME
    displayName: Host name for route
    description: Host name for route
    required: true    
  - name: CPU_REQUEST
    displayName: Requested CPU
    description: Requested CPU
    required: true
  - name: CPU_LIMIT
    displayName: CPU upper limit
    description: CPU upper limit
    required: true
  - name: MEMORY_REQUEST
    displayName: Requested memory
    description: Requested memory
    required: true
  - name: MEMORY_LIMIT
    displayName: Memory upper limit
    description: Memory upper limit
    required: true
  - name: HEALTH_CHECK_DELAY
    value: '150'
    displayName: Memory upper limit
    description: Memory upper limit
    required: true    
  - name: REPLICAS
    value: '1'
    required: true
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      labels:
        app: ${NAME}${SUFFIX}
      annotations:
        as-copy-of: "template.django-secret"
      name: ${NAME}-django${SUFFIX}
    stringData:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the backend image
      labels:
        shared: "true"        
      creationTimestamp: null
      name: '${NAME}-backend'
    spec:
      lookupPolicy:
        local: false
    status:
      dockerImageRepository: ''
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      name: '${NAME}-backend${SUFFIX}'
      labels:
        name: backend
        app: zeva
        role: backend
        env: '${ENV_NAME}'
    spec:
      ports:
        - name: backend
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        name: '${NAME}-backend${SUFFIX}'
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      creationTimestamp: 
      annotations:      
        haproxy.router.openshift.io/timeout: 1500s      
      labels:
        name: backend
        app: zeva
        role: backend
        env: '${ENV_NAME}'
      name: ${NAME}-backend${SUFFIX}
    spec:
      host: ${BACKEND_HOST_NAME}
      path: /api
      port:
        targetPort: backend
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: '${NAME}-backend${SUFFIX}'
        weight: 100
      wildcardPolicy: None
#  - apiVersion: route.openshift.io/v1
#    kind: Route
#    metadata:
#      creationTimestamp: null
#      labels:
#        name: backend
#        app: zeva
#        role: backend
#        env: '${ENV_NAME}'
#      name: '${NAME}-backend-health${SUFFIX}'
#    spec:
#      host: ${HOST_NAME}
#      path: /health
#      port:
#        targetPort: backend
#      tls:
#        termination: edge
#      to:
#        kind: Service
#        name: '${NAME}-backend${SUFFIX}'
#        weight: 100
#      wildcardPolicy: None
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
      creationTimestamp: null
      name: ${NAME}-backend${SUFFIX}
    spec:
      replicas: ${{REPLICAS}}
      revisionHistoryLimit: 10
      selector:
        name: ${NAME}-backend${SUFFIX}
      strategy:
        activeDeadlineSeconds: 800
        recreateParams:
          mid:
            execNewPod:
              command:
                - /bin/sh
                - '-c'
                - |-
                  sleep 45
                  python ./manage.py migrate
                  if [ $? -eq 0 ]; then 
                    python ./manage.py load_ops_data --directory ./api/fixtures/operational
                  else
                    exit 1
                  fi
              containerName: backend
            failurePolicy: Retry
          timeoutSeconds: 600
        resources: {}
        type: Recreate
      template:
        metadata:
          creationTimestamp: null
          labels:
            name: ${NAME}-backend${SUFFIX}
        spec:
          containers:
            - name: backend
              image: null
              imagePullPolicy: IfNotPresent
              env:
                - name: DATABASE_NAME
                  value: zeva
                - name: DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      name: zeva-patroni-app
                      key: app-db-username
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: zeva-patroni-app
                      key: app-db-password
                - name: DATABASE_ENGINE
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-config${SUFFIX}
                      key: database_engine
                - name: DATABASE_SERVICE_NAME
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-config${SUFFIX}
                      key: database_service_name
                - name: POSTGRESQL_SERVICE_HOST
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-config${SUFFIX}
                      key: postgresql_service_host
                - name: POSTGRESQL_SERVICE_PORT
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-config${SUFFIX}
                      key: postgresql_service_port
                - name: KEYCLOAK_CERTS_URL
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-config${SUFFIX}
                      key: keycloak_certs_url
                - name: KEYCLOAK_REALM
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-config${SUFFIX}
                      key: keycloak_realm
                - name: KEYCLOAK_REALM_URL
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-config${SUFFIX}
                      key: keycloak_realm_url
                - name: KEYCLOAK_AUTHORITY
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-config${SUFFIX}
                      key: keycloak_authority
                - name: KEYCLOAK_ISSUER
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-config${SUFFIX}
                      key: keycloak_issuer
                - name: KEYCLOAK_AUDIENCE
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-config${SUFFIX}
                      key: keycloak_audience
                - name: KEYCLOAK_CLIENT_ID
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-config${SUFFIX}
                      key: keycloak_client_id
                - name: WELL_KNOWN_ENDPOINT
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-config${SUFFIX}
                      key: well_known_endpoint     
                - name: DJANGO_DEBUG
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-config${SUFFIX}
                      key: django_debug
                - name: DJANGO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-django${SUFFIX}
                      key: DJANGO_SECRET_KEY
                - name: APP_CONFIG
                  value: /opt/app-root/src/gunicorn.cfg.py
                - name: ENV_NAME
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-config${SUFFIX}
                      key: env_name
                - name: MINIO_USE_SSL
                  value: 'true'
                - name: MINIO_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-minio-${ENV_NAME}
                      key: MINIO_ACCESS_KEY
                - name: MINIO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-minio-${ENV_NAME}
                      key: MINIO_SECRET_KEY
                - name: MINIO_ENDPOINT
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-config${SUFFIX}
                      key: minio_endpoint
                - name: EMAIL_SERVICE_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: email-service
                      key: EMAIL_SERVICE_CLIENT_ID                      
                - name: EMAIL_SERVICE_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: email-service
                      key: EMAIL_SERVICE_CLIENT_SECRET
                - name: CHES_AUTH_URL
                  valueFrom:
                    secretKeyRef:
                      name: email-service
                      key: CHES_AUTH_URL                      
                - name: CHES_EMAIL_URL
                  valueFrom:
                    secretKeyRef:
                      name: email-service
                      key: CHES_EMAIL_URL
                - name: SENDER_EMAIL
                  valueFrom:
                    secretKeyRef:
                      name: email-service
                      key: SENDER_EMAIL  
              ports:
                - containerPort: 8080
                  protocol: TCP
              readinessProbe:
                failureThreshold: 90
                tcpSocket:
                  port: 8080
                initialDelaySeconds: ${{HEALTH_CHECK_DELAY}}
                periodSeconds: 15
                successThreshold: 1
                timeoutSeconds: 3
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - backend
            from:
              kind: ImageStreamTag
              name: ${NAME}-backend:${VERSION}
            lastTriggeredImage: null
          type: ImageChange
        - type: ConfigChange
    status:
      availableReplicas: 0
      latestVersion: 0
      observedGeneration: 0
      replicas: 0
      unavailableReplicas: 0
      updatedReplicas: 0
