result = 0
runParallel = true
zevaRelease="v0.0.6"

podTemplate(label: "develop-maven-${env.BUILD_NUMBER}", name: "develop-maven-${env.BUILD_NUMBER}", serviceAccount: 'jenkins-prod', cloud: 'openshift',
        containers: [
            containerTemplate(
                name: 'jnlp',
                image: 'registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7:v3.9',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '2Gi',
                resourceLimitMemory: '4Gi',
                workingDir: '/home/jenkins',
                activeDeadlineSeconds: 600,
                slaveConnectTimeout: 600,
                command: '',
                args: '${computer.jnlpmac} ${computer.name}'

            )
        ]
) {

    node("develop-maven-${env.BUILD_NUMBER}") {

        //checkout code
        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "${zevaRelease}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-account', url: 'https://github.com/bcgov/zeva.git']]]

        //load groovy scripts
        def prepareBuilds = load "openshift/pipelines/scripts/prepareBuilds.groovy"

        buildStages = prepareBuilds.buildStages('dev',zevaRelease)

        for (builds in buildStages) {
            if (runParallel) {
                parallel(builds)
            } else {
                // run serially (nb. Map is unordered! )
                for (build in builds.values()) {
                    build.call()
                }
            }
        }

        //load deployment scripts
        def prepareDeployments = load "openshift/pipelines/scripts/prepareDeployments.groovy"

        //apply deployment config
        prepareDeployments.backendDeployStage("dev").call()
        prepareDeployments.frontendDeployStage("dev").call()

        //refresh the dev tag to deploy on dev
        openshift.withProject("tbiwaq-dev") {
            openshift.tag("tbiwaq-tools/backend:${zevaRelease}", 'tbiwaq-dev/backend:dev')
            openshift.tag("tbiwaq-tools/frontend:${zevaRelease}", 'tbiwaq-dev/frontend:dev')
        }


    }
}
