# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import generated.transactions_pb2 as transactions__pb2


class TransactionListStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetTransactions = channel.unary_stream(
        '/zeva.transactions.TransactionList/GetTransactions',
        request_serializer=transactions__pb2.TransactionListRequest.SerializeToString,
        response_deserializer=transactions__pb2.TransactionSummary.FromString,
        )


class TransactionListServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetTransactions(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TransactionListServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetTransactions': grpc.unary_stream_rpc_method_handler(
          servicer.GetTransactions,
          request_deserializer=transactions__pb2.TransactionListRequest.FromString,
          response_serializer=transactions__pb2.TransactionSummary.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'zeva.transactions.TransactionList', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
