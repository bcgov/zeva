name: CI and Release Workflow

on:
  push:
    branches:
      - master

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2a: Get the current default branch and set tag name
      - name: Get Current Default Branch and Set Tag Name
        id: get_default_branch
        run: |
          # Fetch the current default branch using the GitHub API
          current_default_branch=$(gh api repos/${{ github.repository }} | jq -r '.default_branch')
          echo "Current default branch is: $current_default_branch"
          
          # Extract the current release version number (assumes format is release-X.Y.Z)
          current_version=$(echo "$current_default_branch" | grep -oP '\d+\.\d+\.\d+')
          echo "Current version extracted: $current_version"

          # Create tag in the format vX.Y.Z
          tag_name="v$current_version"
          echo "Generated tag name: $tag_name"
          
          # Set both outputs: current default branch and the tag name
          echo "::set-output name=current_default_branch::$current_default_branch"
          echo "::set-output name=tag_name::$tag_name"


      # Step 1 (moved): Create a GitHub release for the current commit on master, using the generated tag name
      - name: Create GitHub Release from Master Commit
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_default_branch.outputs.tag_name }}  # Use the new tag name
          name: "Release ${{ steps.get_default_branch.outputs.tag_name }}"
          body: "Release based on commit ${{ github.sha }} on master"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 2b: Get the new release branch by incrementing the version
      - name: Get New Release Branch
        id: get_new_release_branch
        run: |
          # Get the current default branch from the previous step
          current_default_branch="${{ steps.get_default_branch.outputs.current_default_branch }}"
          
          # Extract the current release version number (assumes format is release-X.Y.Z)
          current_version=$(echo "$current_default_branch" | grep -oP '\d+\.\d+\.\d+')
          
          # Increment the minor version (X.Y.Z -> X.(Y+1).0)
          major_version=$(echo "$current_version" | cut -d. -f1)
          minor_version=$(echo "$current_version" | cut -d. -f2)
          patch_version=$(echo "$current_version" | cut -d. -f3)

          # Increment the minor version by 1 for the new release branch
          new_minor_version=$((minor_version + 1))
          new_release_branch="release-${major_version}.${new_minor_version}.0"
          
          echo "New release branch will be: $new_release_branch"
          
          # Set the new release branch as output for the next steps
          echo "::set-output name=new_release_branch::$new_release_branch"

      # Step 3: Create the new release branch from master
      - name: Create New Release Branch
        run: |
          # Get the new release branch name from the previous step
          new_release_branch=${{ steps.get_new_release_branch.outputs.new_release_branch }}
          
          # Create the new branch from master
          git checkout -b $new_release_branch
          git push origin $new_release_branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Set the new release branch as the default branch using GitHub CLI
      - name: Set New Release Branch as Default
        run: |
          new_release_branch=${{ steps.get_new_release_branch.outputs.new_release_branch }}

          # Set the new branch as the default using the GitHub API
          gh api -X PATCH "repos/${{ github.repository }}" -f default_branch="$new_release_branch"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
