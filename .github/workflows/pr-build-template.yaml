name: PR Build Template

on:
  workflow_call:
    inputs:
      pr-number:
        required: true
        type: string
      version:
        required: true
        type: string
    secrets:
      tools-namespace:
        required: true
      dev-namespace:
        required: true
      zeva-dev-username:
        required: true
      zeva-dev-password:
        required: true       
      openshift-server:
         required: true 
      openshift-token:   
         required: true       
        
env:
  GIT_URL: https://github.com/bcgov/zeva.git 
  
jobs:

  database:

    name: Start Database
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          ref: refs/pull/${{ inputs.pr-number }}/head

      - name: Log in to Openshift
        uses: redhat-actions/oc-login@v1.2
        with:
          openshift_server_url: ${{ secrets.openshift-server }}
          openshift_token: ${{ secrets.openshift-token }}
          insecure_skip_tls_verify: true
          namespace: ${{ secrets.tools-namespace }}    


# oc -n ${{ secrets.dev-namespace }} wait --for=jsonpath='{.status.availableReplicas}'=1 --timeout=180s statefulset/zeva-spilo-dev-${{ inputs.pr-number }}
      - name: Setup Database
        shell: bash {0}
        run: |
          cd charts/zeva-spilo
          helm status -n ${{ secrets.dev-namespace }} zeva-spilo-dev-${{ inputs.pr-number }}
          if [ $? -eq 0 ]; then
            echo "zeva-spilo-dev-${{ inputs.pr-number }} exists already"
          else
            echo "==> Installing zeva-spilo-dev-${{ inputs.pr-number }}, will load the test data into database as well, it may take few minutes .."
            helm install -n ${{ secrets.dev-namespace }} -f ./values-dev-pr.yaml --wait zeva-spilo-dev-${{ inputs.pr-number }} .
            oc -n ${{ secrets.dev-namespace }} wait --for=condition=Ready pod/zeva-spilo-dev-${{ inputs.pr-number }}-0
            echo "==> Spilo is up and running"
            echo "==> Mounting dataload PVC"
            oc -n ${{ secrets.dev-namespace }} set volume statefulset/zeva-spilo-dev-${{ inputs.pr-number }} --add --name=dataload -t pvc --claim-name=pr-dev-build-data --overwrite --mount-path=/dataload || true
            sleep 120
            oc -n ${{ secrets.dev-namespace }} wait --for=condition=Ready pod/zeva-spilo-dev-${{ inputs.pr-number }}-0
            echo "==> Spilo is up and running again"
            echo "==> Creating user and database and loading test data"
            oc -n ${{ secrets.dev-namespace }} exec zeva-spilo-dev-${{ inputs.pr-number }}-0 -- psql -c "create user ${{ secrets.zeva-dev-username }} WITH PASSWORD '${{ secrets.zeva-dev-password }}'" || true
            oc -n ${{ secrets.dev-namespace }} exec zeva-spilo-dev-${{ inputs.pr-number }}-0 -- psql -c "create database zeva owner ${{ secrets.zeva-dev-username }} ENCODING 'UTF8' LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8'" || true
            oc -n ${{ secrets.dev-namespace }} exec zeva-spilo-dev-${{ inputs.pr-number }}-0 -- psql -c "ALTER SYSTEM SET log_filename='postgresql-%H.log'" || true
            oc -n ${{ secrets.dev-namespace }} exec zeva-spilo-dev-${{ inputs.pr-number }}-0 -- psql -c "ALTER SYSTEM SET log_connections='off'" || true
            oc -n ${{ secrets.dev-namespace }} exec zeva-spilo-dev-${{ inputs.pr-number }}-0 -- psql -c "ALTER SYSTEM SET log_disconnections='off'" || true
            oc -n ${{ secrets.dev-namespace }} exec zeva-spilo-dev-${{ inputs.pr-number }}-0 -- psql -c "ALTER SYSTEM SET log_checkpoints='off'" || true
            oc -n ${{ secrets.dev-namespace }} exec zeva-spilo-dev-${{ inputs.pr-number }}-0 -- psql -c "select pg_reload_conf()" || true
            oc -n ${{ secrets.dev-namespace }} exec zeva-spilo-dev-${{ inputs.pr-number }}-0 -- bash -c "psql zeva < /dataload/LatestBuild.sql >> /tmp/zeva-spilo-dev-${{ inputs.pr-number }}-$(date +"%Y%m%d-%I%M%S%p").log 2>&1"
            echo "==> Spilo is ready for use"
          fi

  # build-frontend:

  #   name: Build ZEVA Frontend on Openshift
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60
  #   needs: database

  #   steps:

  #     - name: Check out repository
  #       uses: actions/checkout@v3
  #       with:
  #         ref: refs/pull/${{ inputs.pr-number }}/head

  #     - name: Log in to Openshift
  #       uses: redhat-actions/oc-login@v1.2
  #       with:
  #         openshift_server_url: ${{ secrets.openshift-server }}
  #         openshift_token: ${{ secrets.openshift-token }}
  #         insecure_skip_tls_verify: true
  #         namespace: ${{ secrets.tools-namespace }}

  #     - name: Build ZEVA Frontend
  #       run: |
  #         cd openshift/templates/frontend
  #         oc process -f ./frontend-bc-docker.yaml NAME=zeva SUFFIX=-build-${{ inputs.pr-number }} VERSION=build-${{ inputs.version }}-${{ inputs.pr-number }} GIT_URL=${{ env.GIT_URL }} GIT_REF=refs/pull/${{ inputs.pr-number }}/head | oc apply --wait=true -f - -n ${{ secrets.tools-namespace }}
  #         oc start-build --wait=true zeva-frontend-build-${{ inputs.pr-number }}

  # build-backend:

  #   name: Build ZEVA Backend on Openshift
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60
  #   needs: database

  #   steps:

  #     - name: Check out repository
  #       uses: actions/checkout@v3
  #       with:
  #         ref: refs/pull/${{ inputs.pr-number }}/head

  #     - name: Log in to Openshift
  #       uses: redhat-actions/oc-login@v1.2
  #       with:
  #         openshift_server_url: ${{ secrets.openshift-server }}
  #         openshift_token: ${{ secrets.openshift-token }}
  #         insecure_skip_tls_verify: true
  #         namespace: ${{ secrets.tools-namespace }}

  #     - name: Build ZEVA Backend
  #       run: |
  #         cd openshift/templates/backend
  #         oc process -f ./backend-bc.yaml NAME=zeva SUFFIX=-build-${{ inputs.pr-number }} VERSION=build-${{ inputs.version }}-${{ inputs.pr-number }} GIT_URL=${{ env.GIT_URL }} GIT_REF=refs/pull/${{ inputs.pr-number }}/head | oc apply --wait=true -f - -n ${{ secrets.tools-namespace }}
  #         oc start-build --wait=true zeva-backend-build-${{ inputs.pr-number }}

  # deploy-on-dev:

  #   name: Deploy ZEVA on Dev
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60
  #   needs: [build-frontend,build-backend]
 
  #   steps:

  #     - name: Check out repository
  #       uses: actions/checkout@v3
  #       with:
  #         ref: refs/pull/${{ inputs.pr-number }}/head

  #     - name: Log in to Openshift
  #       uses: redhat-actions/oc-login@v1.2
  #       with:
  #         openshift_server_url: ${{ secrets.openshift-server }}
  #         openshift_token: ${{ secrets.openshift-token }}
  #         insecure_skip_tls_verify: true
  #         namespace: ${{ secrets.tools-namespace }}  
      
  #     - name: Tag Frontend Image from tools to dev
  #       run: |
  #         oc tag ${{ secrets.tools-namespace }}/zeva-frontend:build-${{ inputs.version }}-${{ inputs.pr-number }} ${{ secrets.dev-namespace }}/zeva-frontend:dev-${{ inputs.version }}-${{ inputs.pr-number }}
  #         oc tag ${{ secrets.tools-namespace }}/zeva-backend:build-${{ inputs.version }}-${{ inputs.pr-number }} ${{ secrets.dev-namespace }}/zeva-backend:dev-${{ inputs.version }}-${{ inputs.pr-number }}

  #     - name: Deply zeva-frontend on Dev
  #       shell: bash {0}
  #       run: |
  #         cd charts/zeva-apps/charts/zeva-frontend
  #         helm status -n ${{ secrets.dev-namespace }} zeva-frontend-dev-${{ inputs.pr-number }}
  #         if [ $? -eq 0 ]; then
  #           echo "zeva-frontend-dev-${{ inputs.pr-number }} release exists already"
  #           helm upgrade --set frontendImageTagname=dev-${{ inputs.version }}-${{ inputs.pr-number }} \
  #             --set openshiftLicensePlate=${{ secrets.OPENSHIFT_NAMESPACE_PLATE }} \
  #             --set suffix=-dev-${{ inputs.pr-number }} \
  #             --set frontendConfigMap.apiBase=https://zeva-backend-dev-${{ inputs.pr-number }}.apps.silver.devops.gov.bc.ca/api \
  #             --set frontendConfigMap.keycloakCallbackUrl=https://zeva-dev-${{ inputs.pr-number }}.apps.silver.devops.gov.bc.ca\
  #             --set frontendConfigMap.keycloakPostLogoutUrl=https://zeva-dev-${{ inputs.pr-number }}.apps.silver.devops.gov.bc.ca\
  #             --set appConfigMap.backendHostName=zeva-backend-dev-${{ inputs.pr-number }}.apps.silver.devops.gov.bc.ca \
  #             --set appConfigMap.databaseServiceName=zeva-spilo-dev-${{ inputs.pr-number }} \
  #             --set appConfigMap.hostName=zeva-dev-${{ inputs.pr-number }}.apps.silver.devops.gov.bc.ca \
  #             -n ${{ secrets.dev-namespace }} -f ./values-dev.yaml zeva-frontend-dev-${{ inputs.pr-number }} .
  #         else
  #           echo "zeva-frontend-dev-${{ inputs.pr-number }} release does not exist"
  #           helm install --set frontendImageTagname=dev-${{ inputs.version }}-${{ inputs.pr-number }} \
  #             --set openshiftLicensePlate=${{ secrets.OPENSHIFT_NAMESPACE_PLATE }} \
  #             --set suffix=-dev-${{ inputs.pr-number }} \
  #             --set frontendConfigMap.apiBase=https://zeva-backend-dev-${{ inputs.pr-number }}.apps.silver.devops.gov.bc.ca/api \
  #             --set frontendConfigMap.keycloakCallbackUrl=https://zeva-dev-${{ inputs.pr-number }}.apps.silver.devops.gov.bc.ca \
  #             --set frontendConfigMap.keycloakPostLogoutUrl=https://zeva-dev-${{ inputs.pr-number }}.apps.silver.devops.gov.bc.ca \
  #             --set appConfigMap.backendHostName=zeva-backend-dev-${{ inputs.pr-number }}.apps.silver.devops.gov.bc.ca \
  #             --set appConfigMap.databaseServiceName=zeva-spilo-dev-${{ inputs.pr-number }} \
  #             --set appConfigMap.hostName=zeva-dev-${{ inputs.pr-number }}.apps.silver.devops.gov.bc.ca \
  #             -n ${{ secrets.dev-namespace }} -f ./values-dev.yaml zeva-frontend-dev-${{ inputs.pr-number }} .
  #         fi
          
  #     - name: Deply zeva-backend on Dev
  #       shell: bash {0}
  #       run: |
  #         cd charts/zeva-apps/charts/zeva-backend
  #         helm status -n ${{ secrets.dev-namespace }} zeva-backend
  #         if [ $? -eq 0 ]; then
  #           echo "zeva-backend-dev-${{ inputs.pr-number }} release exists already"
  #           helm upgrade --set backendImageTagname=dev-${{ inputs.version }}-${{ inputs.pr-number }} \
  #             --set suffix=-dev-${{ inputs.pr-number }} \
  #             --set backendRoute.hostName=zeva-backend-dev-${{ inputs.pr-number }}.apps.silver.devops.gov.bc.ca \
  #             -n ${{ secrets.dev-namespace }} -f ./values-dev.yaml zeva-backend-dev-${{ inputs.pr-number }} .
  #         else
  #           echo "zeva-backend-dev-${{ inputs.pr-number }} release does not exist"
  #           helm install --set backendImageTagname=dev-${{ inputs.version }}-${{ inputs.pr-number }} \
  #             --set suffix=-dev-${{ inputs.pr-number }} \
  #             --set backendRoute.hostName=zeva-backend-dev-${{ inputs.pr-number }}.apps.silver.devops.gov.bc.ca \
  #             -n ${{ secrets.dev-namespace }} -f ./values-dev.yaml zeva-backend-dev-${{ inputs.pr-number }} .
  #         fi
          