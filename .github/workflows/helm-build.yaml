## For each release, please update the value of workflow name, branches, PR_NUMBER and RELEASE_NAME
## Also update frontend/package.json version

name: Helm Build 1.46.0

on:
  push:
    branches: [ release-1.46.0 ]
  workflow_dispatch:
  workflow_call:

env:
  ## The pull request number of the Tracking pull request to merge the release branch to main
  PR_NUMBER: 1248
  RELEASE_NAME: release-1.46.0
  VERSION: 1.46.0
  GIT_URL: https://github.com/bcgov/zeva.git 
  TOOLS_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE_PLATE }}-tools
  DEV_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE_PLATE }}-dev
  TEST_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE_PLATE }}-test
  PROD_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE_PLATE }}-prod


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
jobs:

  frontend-unit-test:

    name: Run Frontend Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Fronend Jest coverage report
        uses: ArtiomTr/jest-coverage-report-action@v2.2.1
        continue-on-error: false
        with:
          working-directory: frontend
          test-script: npm run test
        
  backend-unit-test:

    name: Run Backend Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Run coverage report for django tests 
        uses: kuanfandevops/django-test-action@itvr-django-test
        continue-on-error: false
        env:
          MINIO_ENDPOINT: minio:9000
          MINIO_ACCESS_KEY: testtest
          MINIO_SECRET_KEY: testtest
        with:
          settings-dir-path: "backend/api"
          requirements-file: "backend/requirements.txt"
          managepy-dir: backend

  ## This is the CI job
  build:

    name: Build ZEVA on Openshift
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Log in to Openshift
        uses: redhat-actions/oc-login@v1.2
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.TOOLS_NAMESPACE }}

      - name: Build ZEVA Backend
        run: |
          cd openshift/templates/backend
          oc process -f ./backend-bc.yaml NAME=zeva SUFFIX=-build-${{ env.PR_NUMBER }} VERSION=build-${{ env.VERSION }}-${{ env.PR_NUMBER }} GIT_URL=${{ env.GIT_URL }} GIT_REF=refs/pull/${{ env.PR_NUMBER }}/head | oc apply --wait=true -f - -n ${{ env.TOOLS_NAMESPACE }}
          oc start-build --wait=true zeva-backend-build-${{ env.PR_NUMBER }}

      - name: Build ZEVA Frontend
        run: |
          cd openshift/templates/frontend
          oc process -f ./frontend-bc-docker.yaml NAME=zeva SUFFIX=-build-${{ env.PR_NUMBER }} VERSION=build-${{ env.VERSION }}-${{ env.PR_NUMBER }} GIT_URL=${{ env.GIT_URL }} GIT_REF=refs/pull/${{ env.PR_NUMBER }}/head | oc apply --wait=true -f - -n ${{ env.TOOLS_NAMESPACE }}
          oc start-build --wait=true zeva-frontend-build-${{ env.PR_NUMBER }}

  deploy-on-dev:

    name: Deploy ZEVA on Dev
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: build
 
    steps:

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Log in to Openshift
        uses: redhat-actions/oc-login@v1.2
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.TOOLS_NAMESPACE }}  
      
      - name: Tag Frontend Image from tools to dev
        run: |
          oc tag ${{ env.TOOLS_NAMESPACE }}/zeva-frontend:build-${{ env.VERSION }}-${{ env.PR_NUMBER }} ${{ env.DEV_NAMESPACE }}/zeva-frontend:dev-${{ env.VERSION }}
          oc tag ${{ env.TOOLS_NAMESPACE }}/zeva-backend:build-${{ env.VERSION }}-${{ env.PR_NUMBER }} ${{ env.DEV_NAMESPACE }}/zeva-backend:dev-${{ env.VERSION }}

      # helm status will show an error if the helm release doesn't exist. The error will be ignored.
      - name: Deply zeva-frontend on Dev
        shell: bash {0}
        run: |
          cd charts/zeva-apps/charts/zeva-frontend
          helm status -n ${{ env.DEV_NAMESPACE }} zeva-frontend
          if [ $? -eq 0 ]; then
            echo "zeva-frontend release exists already"
            helm upgrade --set frontendImageTagname=dev-${{ env.VERSION }},openshiftLicensePlate=${{ secrets.OPENSHIFT_NAMESPACE_PLATE }} -n ${{ env.DEV_NAMESPACE }} -f ./values-dev.yaml zeva-frontend .
          else
            echo "zeva-frontend release does not exist"
            helm install --set frontendImageTagname=dev-${{ env.VERSION }},openshiftLicensePlate=${{ secrets.OPENSHIFT_NAMESPACE_PLATE }} -n ${{ env.DEV_NAMESPACE }} -f ./values-dev.yaml zeva-frontend .
          fi
          
      # helm status will show an error if the helm release doesn't exist. The error will be ignored.
      - name: Deply zeva-backend on Dev
        shell: bash {0}
        run: |
          cd charts/zeva-apps/charts/zeva-backend
          helm status -n ${{ env.DEV_NAMESPACE }} zeva-backend
          if [ $? -eq 0 ]; then
            echo "zeva-backend release exists already"
            helm upgrade --set backendImageTagname=dev-${{ env.VERSION }} -n ${{ env.DEV_NAMESPACE }} -f ./values-dev.yaml zeva-backend .
          else
            echo "zeva-backend release does not exist"
            helm install --set backendImageTagname=dev-${{ env.VERSION }} -n ${{ env.DEV_NAMESPACE }} -f ./values-dev.yaml zeva-backend .
          fi
          
  deploy-on-test:

    name: Deploy ZEVA on Test
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: deploy-on-dev
 
    steps:

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Log in to Openshift
        uses: redhat-actions/oc-login@v1.2
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.TOOLS_NAMESPACE }}  

      - name: Ask for approval for ZEVA Test deployment
        uses: trstringer/manual-approval@v1.6.0
        with:
          secret: ${{ github.TOKEN }}
          approvers: AlexZorkin,emi-hi,tim738745,vibhiquartech,kuanfandevops
          minimum-approvals: 1
          issue-title: "ZEVA ${{ env.RELEASE_NAME }} Test Deployment"
      
      - name: Tag Frontend Image from tools to Test
        run: |
          oc tag ${{ env.TOOLS_NAMESPACE }}/zeva-frontend:build-${{ env.VERSION }}-${{ env.PR_NUMBER }} ${{ env.TEST_NAMESPACE }}/zeva-frontend:test-${{ env.VERSION }}
          oc tag ${{ env.TOOLS_NAMESPACE }}/zeva-backend:build-${{ env.VERSION }}-${{ env.PR_NUMBER }} ${{ env.TEST_NAMESPACE }}/zeva-backend:test-${{ env.VERSION }}

      # helm status will show an error if the helm release doesn't exist. The error will be ignored.
      - name: Deply zeva-frontend on Test
        shell: bash {0}
        run: |
          cd charts/zeva-apps/charts/zeva-frontend
          helm status -n ${{ env.TEST_NAMESPACE }} zeva-frontend
          if [ $? -eq 0 ]; then
            echo "zeva-frontend release exists already"
            helm upgrade --set frontendImageTagname=test-${{ env.VERSION }},openshiftLicensePlate=${{ secrets.OPENSHIFT_NAMESPACE_PLATE }} -n ${{ env.TEST_NAMESPACE }} -f ./values-test.yaml zeva-frontend .
          else
            echo "zeva-frontend release does not exist"
            helm install --set frontendImageTagname=test-${{ env.VERSION }},openshiftLicensePlate=${{ secrets.OPENSHIFT_NAMESPACE_PLATE }} -n ${{ env.TEST_NAMESPACE }} -f ./values-test.yaml zeva-frontend .
          fi
          
      # helm status will show an error if the helm release doesn't exist. The error will be ignored.
      - name: Deply zeva-backend on Test
        shell: bash {0}
        run: |
          cd charts/zeva-apps/charts/zeva-backend
          helm status -n ${{ env.TEST_NAMESPACE }} zeva-backend
          if [ $? -eq 0 ]; then
            echo "zeva-backend release exists already"
            helm upgrade --set backendImageTagname=test-${{ env.VERSION }} -n ${{ env.TEST_NAMESPACE }} -f ./values-test.yaml zeva-backend .
          else
            echo "zeva-backend release does not exist"
            helm install --set backendImageTagname=test-${{ env.VERSION }} -n ${{ env.TEST_NAMESPACE }} -f ./values-test.yaml zeva-backend .
          fi
                    
  deploy-on-prod:

    name: Deploy ZEVA on Prod
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: deploy-on-test
 
    steps:

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Log in to Openshift
        uses: redhat-actions/oc-login@v1.2
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.TOOLS_NAMESPACE }}  

      - name: Ask for approval for ZEVA Prod deployment
        uses: trstringer/manual-approval@v1.6.0
        with:
          secret: ${{ github.TOKEN }}
          approvers: AlexZorkin,kuanfandevops,tim738745,emi-hi
          minimum-approvals: 2
          issue-title: "ZEVA ${{ env.RELEASE_NAME }} Prod Deployment"
          timeout-minutes: 60
      
#      - name: Tag Frontend Image from tools to Prod
#        run: |
#          oc tag ${{ env.TOOLS_NAMESPACE }}/zeva-frontend:build-${{ env.VERSION }}-${{ env.PR_NUMBER }} ${{ env.PROD_NAMESPACE }}/zeva-frontend:prod-${{ env.VERSION }}
#          oc tag ${{ env.TOOLS_NAMESPACE }}/zeva-backend:build-${{ env.VERSION }}-${{ env.PR_NUMBER }} ${{ env.PROD_NAMESPACE }}/zeva-backend:prod-${{ env.VERSION }}

#      - name: Deply zeva-frontend on Prod
#        shell: bash {0}
#        run: |
#          cd charts/zeva-apps/charts/zeva-frontend
#          helm status -n ${{ env.PROD_NAMESPACE }} zeva-frontend
#          if [ $? -eq 0 ]; then
#            echo "zeva-frontend release exists already"
#            helm upgrade --set frontendImageTagname=prod-${{ env.VERSION }},openshiftLicensePlate=${{ secrets.OPENSHIFT_NAMESPACE_PLATE }} -n ${{ env.PROD_NAMESPACE }} -f ./values-prod.yaml zeva-frontend .
#          else
#            echo "zeva-frontend release does not exist"
#            helm install --set frontendImageTagname=prod-${{ env.VERSION }},openshiftLicensePlate=${{ secrets.OPENSHIFT_NAMESPACE_PLATE }} -n ${{ env.PROD_NAMESPACE }} -f ./values-prod.yaml zeva-frontend .
#          fi
          
#      - name: Deply zeva-backend on Prod
#        shell: bash {0}
#        run: |
#          cd charts/zeva-apps/charts/zeva-backend
#          helm status -n ${{ env.PROD_NAMESPACE }} zeva-backend
#          if [ $? -eq 0 ]; then
#            echo "zeva-backend release exists already"
#            helm upgrade --set backendImageTagname=prod-${{ env.VERSION }} -n ${{ env.PROD_NAMESPACE }} -f ./values-prod.yaml zeva-backend .
#          else
#            echo "zeva-backend release does not exist"
#            helm install --set backendImageTagname=prod-${{ env.VERSION }} -n ${{ env.PROD_NAMESPACE }} -f ./values-prod.yaml zeva-backend .
#          fi
                                        