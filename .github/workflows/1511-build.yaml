## For each release, please update the value of workflow name, PR_NUMBER and VERSION (the version this pr will be merged into)
## Also update frontend/package.json version

name: PR-1511

on:
  workflow_dispatch:

env:
  ## The pull request number of the Tracking pull request to merge the release branch to main
  PR_NUMBER: 1511
  VERSION: 1.46.0
  GIT_URL: https://github.com/bcgov/zeva.git 
  TOOLS_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE_PLATE }}-tools
  DEV_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE_PLATE }}-dev

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
jobs:

  # frontend-unit-test:

  #   name: Run Frontend Unit Tests
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60

  #   steps:

  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ref: refs/pull/${{ env.PR_NUMBER }}/head

  #     - name: Fronend Jest coverage report
  #       uses: ArtiomTr/jest-coverage-report-action@v2.2.1
  #       continue-on-error: false
  #       with:
  #         working-directory: frontend
  #         test-script: npm run test
        
  # backend-unit-test:

  #   name: Run Backend Unit Tests
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ref: refs/pull/${{ env.PR_NUMBER }}/head

  #     - name: Run coverage report for django tests 
  #       uses: kuanfandevops/django-test-action@itvr-django-test
  #       continue-on-error: false
  #       env:
  #         MINIO_ENDPOINT: minio:9000
  #         MINIO_ACCESS_KEY: testtest
  #         MINIO_SECRET_KEY: testtest
  #       with:
  #         settings-dir-path: "backend/api"
  #         requirements-file: "backend/requirements.txt"
  #         managepy-dir: backend

  database:

    name: Start Database for PR-${{ env.PR_NUMBER }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          ref: refs/pull/${{ env.PR_NUMBER }}/head

      - name: Log in to Openshift
        uses: redhat-actions/oc-login@v1.2
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.TOOLS_NAMESPACE }}    

      - name: Start Database
        run: |
          cd charts/zeva-spil
          helm install -n ${{ env.DEV_NAMESPACE }} -f ./value-dev-pr.yaml zeva-spilo-${{ env.PR_NUMBER }} .

  # build:

  #   name: Build ZEVA on Openshift
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60

  #   steps:

  #     - name: Check out repository
  #       uses: actions/checkout@v3
  #       with:
  #         ref: refs/pull/${{ env.PR_NUMBER }}/head

  #     - name: Log in to Openshift
  #       uses: redhat-actions/oc-login@v1.2
  #       with:
  #         openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
  #         openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
  #         insecure_skip_tls_verify: true
  #         namespace: ${{ env.TOOLS_NAMESPACE }}

  #     - name: Build ZEVA Backend
  #       run: |
  #         cd openshift/templates/backend
  #         oc process -f ./backend-bc.yaml NAME=zeva SUFFIX=-build-${{ env.PR_NUMBER }} VERSION=build-${{ env.VERSION }}-${{ env.PR_NUMBER }} GIT_URL=${{ env.GIT_URL }} GIT_REF=refs/pull/${{ env.PR_NUMBER }}/head | oc apply --wait=true -f - -n ${{ env.TOOLS_NAMESPACE }}
  #         oc start-build --wait=true zeva-backend-build-${{ env.PR_NUMBER }}

  #     - name: Build ZEVA Frontend
  #       run: |
  #         cd openshift/templates/frontend
  #         oc process -f ./frontend-bc-docker.yaml NAME=zeva SUFFIX=-build-${{ env.PR_NUMBER }} VERSION=build-${{ env.VERSION }}-${{ env.PR_NUMBER }} GIT_URL=${{ env.GIT_URL }} GIT_REF=refs/pull/${{ env.PR_NUMBER }}/head | oc apply --wait=true -f - -n ${{ env.TOOLS_NAMESPACE }}
  #         oc start-build --wait=true zeva-frontend-build-${{ env.PR_NUMBER }}

  # deploy-on-dev:

  #   name: Deploy ZEVA on Dev
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60
  #   needs: build
 
  #   steps:

      # - name: Please confirm ZEVA database for PR-${{ env.PR_NUMBER }} on Dev has been setup properly
      #   uses: trstringer/manual-approval@v1.6.0
      #   with:
      #     secret: ${{ github.TOKEN }}
      #     approvers: AlexZorkin,kuanfandevops,tim738745,emi-hi,JulianForeman,jig-patel,vibhiquartech
      #     minimum-approvals: 1
      #     issue-title: "Please confirm ZEVA database for PR-${{ env.PR_NUMBER }} on Dev has been setup properly"
      #     timeout-minutes: 60

  #     - name: Check out repository
  #       uses: actions/checkout@v3
  #       with:
  #         ref: refs/pull/${{ env.PR_NUMBER }}/head

  #     - name: Log in to Openshift
  #       uses: redhat-actions/oc-login@v1.2
  #       with:
  #         openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
  #         openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
  #         insecure_skip_tls_verify: true
  #         namespace: ${{ env.TOOLS_NAMESPACE }}  
      
  #     - name: Tag Frontend Image from tools to dev
  #       run: |
  #         oc tag ${{ env.TOOLS_NAMESPACE }}/zeva-frontend:build-${{ env.VERSION }}-${{ env.PR_NUMBER }} ${{ env.DEV_NAMESPACE }}/zeva-frontend:dev-${{ env.VERSION }}-${{ env.PR_NUMBER }}
  #         oc tag ${{ env.TOOLS_NAMESPACE }}/zeva-backend:build-${{ env.VERSION }}-${{ env.PR_NUMBER }} ${{ env.DEV_NAMESPACE }}/zeva-backend:dev-${{ env.VERSION }}-${{ env.PR_NUMBER }}

  #     # helm status will show an error if the helm release doesn't exist. The error will be ignored.
  #     - name: Deply zeva-frontend on Dev
  #       shell: bash {0}
  #       run: |
  #         cd charts/zeva-apps/charts/zeva-frontend
  #         helm status -n ${{ env.DEV_NAMESPACE }} zeva-frontend
  #         if [ $? -eq 0 ]; then
  #           echo "zeva-frontend release exists already"
  #           helm upgrade --set frontendImageTagname=dev-${{ env.VERSION }},openshiftLicensePlate=${{ secrets.OPENSHIFT_NAMESPACE_PLATE }} -n ${{ env.DEV_NAMESPACE }} -f ./values-dev.yaml zeva-frontend .
  #         else
  #           echo "zeva-frontend release does not exist"
  #           helm install --set frontendImageTagname=dev-${{ env.VERSION }},openshiftLicensePlate=${{ secrets.OPENSHIFT_NAMESPACE_PLATE }} -n ${{ env.DEV_NAMESPACE }} -f ./values-dev.yaml zeva-frontend .
  #         fi
          
  #     # helm status will show an error if the helm release doesn't exist. The error will be ignored.
  #     - name: Deply zeva-backend on Dev
  #       shell: bash {0}
  #       run: |
  #         cd charts/zeva-apps/charts/zeva-backend
  #         helm status -n ${{ env.DEV_NAMESPACE }} zeva-backend
  #         if [ $? -eq 0 ]; then
  #           echo "zeva-backend release exists already"
  #           helm upgrade --set backendImageTagname=dev-${{ env.VERSION }} -n ${{ env.DEV_NAMESPACE }} -f ./values-dev.yaml zeva-backend .
  #         else
  #           echo "zeva-backend release does not exist"
  #           helm install --set backendImageTagname=dev-${{ env.VERSION }} -n ${{ env.DEV_NAMESPACE }} -f ./values-dev.yaml zeva-backend .
  #         fi
          

      
