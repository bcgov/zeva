apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    description: Defines how to deploy the application server
  creationTimestamp: null
  name: {{ template "zeva-backend.name" . }}{{ .Values.suffix }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 10
  selector: {{ include "zeva-backend.selectorLabels" . | nindent 4 }}
  strategy:
    activeDeadlineSeconds: 800
    recreateParams:
      mid:
        execNewPod:
          command:
            - /bin/sh
            - '-c'
            - |-
              sleep 45
              python ./manage.py migrate
              if [ $? -eq 0 ]; then 
                python ./manage.py load_ops_data --directory ./api/fixtures/operational
              else
                exit 1
              fi
          containerName: backend
        failurePolicy: Retry
      timeoutSeconds: 600
    resources: {}
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels: {{ include "zeva-backend.labels" . | nindent 8 }}
    spec:
      containers:
        - name: backend
          image: null
          imagePullPolicy: IfNotPresent
          env:
            - name: DATABASE_NAME
              value: zeva
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: zeva-patroni-app
                  key: app-db-username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: zeva-patroni-app
                  key: app-db-password
            - name: DATABASE_ENGINE
              valueFrom:
                configMapKeyRef:
                  name: zeva-config{{ .Values.suffix }}
                  key: database_engine
            - name: DATABASE_SERVICE_NAME
              valueFrom:
                configMapKeyRef:
                  name: zeva-config{{ .Values.suffix }}
                  key: database_service_name
            - name: POSTGRESQL_SERVICE_HOST
              valueFrom:
                configMapKeyRef:
                  name: zeva-config{{ .Values.suffix }}
                  key: postgresql_service_host
            - name: POSTGRESQL_SERVICE_PORT
              valueFrom:
                configMapKeyRef:
                  name: zeva-config{{ .Values.suffix }}
                  key: postgresql_service_port
            - name: KEYCLOAK_CERTS_URL
              valueFrom:
                configMapKeyRef:
                  name: zeva-config{{ .Values.suffix }}
                  key: keycloak_certs_url
            - name: KEYCLOAK_REALM
              valueFrom:
                configMapKeyRef:
                  name: zeva-config{{ .Values.suffix }}
                  key: keycloak_realm
            - name: KEYCLOAK_REALM_URL
              valueFrom:
                configMapKeyRef:
                  name: zeva-config{{ .Values.suffix }}
                  key: keycloak_realm_url
            - name: KEYCLOAK_AUTHORITY
              valueFrom:
                configMapKeyRef:
                  name: zeva-config{{ .Values.suffix }}
                  key: keycloak_authority
            - name: KEYCLOAK_ISSUER
              valueFrom:
                configMapKeyRef:
                  name: zeva-config{{ .Values.suffix }}
                  key: keycloak_issuer
            - name: KEYCLOAK_AUDIENCE
              valueFrom:
                configMapKeyRef:
                  name: zeva-config{{ .Values.suffix }}
                  key: keycloak_audience
            - name: KEYCLOAK_CLIENT_ID
              valueFrom:
                configMapKeyRef:
                  name: zeva-config{{ .Values.suffix }}
                  key: keycloak_client_id
            - name: WELL_KNOWN_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: zeva-config{{ .Values.suffix }}
                  key: well_known_endpoint     
            - name: DJANGO_DEBUG
              valueFrom:
                configMapKeyRef:
                  name: zeva-config{{ .Values.suffix }}
                  key: django_debug
            - name: DJANGO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: zeva-django
                  key: DJANGO_SECRET_KEY
            - name: APP_CONFIG
              value: /opt/app-root/src/gunicorn.cfg.py
            - name: ENV_NAME
              valueFrom:
                configMapKeyRef:
                  name: zeva-config{{ .Values.suffix }}
                  key: env_name
            - name: MINIO_USE_SSL
              value: 'true'
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: zeva-minio-{{ .Values.envName }}
                  key: MINIO_ACCESS_KEY
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: zeva-minio-{{ .Values.envName }}
                  key: MINIO_SECRET_KEY
            - name: MINIO_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: zeva-config{{ .Values.suffix }}
                  key: minio_endpoint
            - name: EMAIL_SERVICE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: email-service
                  key: EMAIL_SERVICE_CLIENT_ID                      
            - name: EMAIL_SERVICE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: email-service
                  key: EMAIL_SERVICE_CLIENT_SECRET
            - name: CHES_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: email-service
                  key: CHES_AUTH_URL                      
            - name: CHES_EMAIL_URL
              valueFrom:
                secretKeyRef:
                  name: email-service
                  key: CHES_EMAIL_URL
            - name: SENDER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: email-service
                  key: SENDER_EMAIL  
          ports:
            - containerPort: 8080
              protocol: TCP
          readinessProbe:
            failureThreshold: 90
            tcpSocket:
              port: 8080
            initialDelaySeconds: {{ .Values.healthCheckDeplay }}
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 3
          resources:
{{ toYaml .Values.resources | indent 12 }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  test: false
  triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - backend
        from:
          kind: ImageStreamTag
          name: {{ template "zeva-backend.name" . }}:{{ .Values.backendImageTagname }}
        lastTriggeredImage: null
      type: ImageChange
    - type: ConfigChange

